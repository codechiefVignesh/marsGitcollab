// Generated by gencpp from file talklisten/PositionRequest.msg
// DO NOT EDIT!


#ifndef TALKLISTEN_MESSAGE_POSITIONREQUEST_H
#define TALKLISTEN_MESSAGE_POSITIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace talklisten
{
template <class ContainerAllocator>
struct PositionRequest_
{
  typedef PositionRequest_<ContainerAllocator> Type;

  PositionRequest_()
    : posx(0)
    , posy(0)
    , ch(0)  {
    }
  PositionRequest_(const ContainerAllocator& _alloc)
    : posx(0)
    , posy(0)
    , ch(0)  {
  (void)_alloc;
    }



   typedef int64_t _posx_type;
  _posx_type posx;

   typedef int64_t _posy_type;
  _posy_type posy;

   typedef uint8_t _ch_type;
  _ch_type ch;





  typedef boost::shared_ptr< ::talklisten::PositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::talklisten::PositionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PositionRequest_

typedef ::talklisten::PositionRequest_<std::allocator<void> > PositionRequest;

typedef boost::shared_ptr< ::talklisten::PositionRequest > PositionRequestPtr;
typedef boost::shared_ptr< ::talklisten::PositionRequest const> PositionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::talklisten::PositionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::talklisten::PositionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::talklisten::PositionRequest_<ContainerAllocator1> & lhs, const ::talklisten::PositionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.posx == rhs.posx &&
    lhs.posy == rhs.posy &&
    lhs.ch == rhs.ch;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::talklisten::PositionRequest_<ContainerAllocator1> & lhs, const ::talklisten::PositionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace talklisten

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::talklisten::PositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::talklisten::PositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::talklisten::PositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::talklisten::PositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::talklisten::PositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::talklisten::PositionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::talklisten::PositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b39829f3535de1edb413ab3260621e2";
  }

  static const char* value(const ::talklisten::PositionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b39829f3535de1eULL;
  static const uint64_t static_value2 = 0xdb413ab3260621e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::talklisten::PositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "talklisten/PositionRequest";
  }

  static const char* value(const ::talklisten::PositionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::talklisten::PositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 posx\n"
"int64 posy\n"
"char ch\n"
;
  }

  static const char* value(const ::talklisten::PositionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::talklisten::PositionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posx);
      stream.next(m.posy);
      stream.next(m.ch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::talklisten::PositionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::talklisten::PositionRequest_<ContainerAllocator>& v)
  {
    s << indent << "posx: ";
    Printer<int64_t>::stream(s, indent + "  ", v.posx);
    s << indent << "posy: ";
    Printer<int64_t>::stream(s, indent + "  ", v.posy);
    s << indent << "ch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TALKLISTEN_MESSAGE_POSITIONREQUEST_H
